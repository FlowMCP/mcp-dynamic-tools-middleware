name: Run Tests on Release

# Wenn du wirklich nur Releases bauen willst, ändere den Trigger (siehe Kommentar unten).
on: push
# Alternative Trigger:
# on:
#   release:
#     types: [published]
# oder für Tags:
# on:
#   push:
#     tags:
#       - 'v*'

permissions:
  contents: read
  id-token: write   # nötig für OIDC

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      - name: Run Jest tests (with coverage)
        run: npm run test:coverage:src

      - name: Upload coverage to Codecov (OIDC)
        uses: codecov/codecov-action@v5
        with:
          use_oidc: true
          files: ./coverage/lcov.info
          flags: unittests
          fail_ci_if_error: false   # Build fällt nicht wegen Codecov aus
          verbose: true             # fürs Debugging; später ggf. entfernen
          slug: ${{ github.repository }}  # explizit: "owner/repo"
          version: v11.2.2          # Workaround: stabile CLI-Version pinnen
          # Falls du NICHT pinnen willst, lösche die Zeile oben und nutze optional:
          # use_legacy_upload_endpoint: true
        # Wichtig: KEIN "token:" und KEIN "git_service:" setzen!
        # Achte auch darauf, dass in den Repo/Org/Environment-Variablen
        # NICHT versehentlich CODECOV_TOKEN / CODECOV_SLUG / CODECOV_OWNER / CODECOV_REPO gesetzt sind.

      # Optional: Coverage-Datei als Artefakt sichern, damit man sie im Zweifel inspizieren kann
      - name: Upload lcov artifact (fallback)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lcov
          path: coverage/lcov.info
